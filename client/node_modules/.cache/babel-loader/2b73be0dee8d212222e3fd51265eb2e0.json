{"ast":null,"code":"var fs = require('fs');\n\nvar DEFAULT_EXCLUDE_DIR = /^\\./;\nvar DEFAULT_FILTER = /^([^\\.].*)\\.js(on)?$/;\nvar DEFAULT_RECURSIVE = true;\n\nmodule.exports = function requireAll(options) {\n  var dirname = typeof options === 'string' ? options : options.dirname;\n  var excludeDirs = options.excludeDirs === undefined ? DEFAULT_EXCLUDE_DIR : options.excludeDirs;\n  var filter = options.filter === undefined ? DEFAULT_FILTER : options.filter;\n  var modules = {};\n  var recursive = options.recursive === undefined ? DEFAULT_RECURSIVE : options.recursive;\n  var resolve = options.resolve || identity;\n  var map = options.map || identity;\n\n  function excludeDirectory(dirname) {\n    return !recursive || excludeDirs && dirname.match(excludeDirs);\n  }\n\n  function filterFile(filename) {\n    if (typeof filter === 'function') {\n      return filter(filename);\n    }\n\n    var match = filename.match(filter);\n    if (!match) return;\n    return match[1] || match[0];\n  }\n\n  var files = fs.readdirSync(dirname);\n  files.forEach(function (file) {\n    var filepath = dirname + '/' + file;\n\n    if (fs.statSync(filepath).isDirectory()) {\n      if (excludeDirectory(file)) return;\n      var subModules = requireAll({\n        dirname: filepath,\n        filter: filter,\n        excludeDirs: excludeDirs,\n        map: map,\n        resolve: resolve\n      });\n      if (Object.keys(subModules).length === 0) return;\n      modules[map(file, filepath)] = subModules;\n    } else {\n      var name = filterFile(file);\n      if (!name) return;\n      modules[map(name, filepath)] = resolve(require(filepath));\n    }\n  });\n  return modules;\n};\n\nfunction identity(val) {\n  return val;\n}","map":{"version":3,"sources":["c:/Users/viren/Desktop/projects/real-estate-listing/client/node_modules/require-all/index.js"],"names":["fs","require","DEFAULT_EXCLUDE_DIR","DEFAULT_FILTER","DEFAULT_RECURSIVE","module","exports","requireAll","options","dirname","excludeDirs","undefined","filter","modules","recursive","resolve","identity","map","excludeDirectory","match","filterFile","filename","files","readdirSync","forEach","file","filepath","statSync","isDirectory","subModules","Object","keys","length","name","val"],"mappings":"AAAA,IAAIA,EAAE,GAAGC,OAAO,CAAC,IAAD,CAAhB;;AAEA,IAAIC,mBAAmB,GAAG,KAA1B;AACA,IAAIC,cAAc,GAAG,sBAArB;AACA,IAAIC,iBAAiB,GAAG,IAAxB;;AAEAC,MAAM,CAACC,OAAP,GAAiB,SAASC,UAAT,CAAoBC,OAApB,EAA6B;AAC5C,MAAIC,OAAO,GAAG,OAAOD,OAAP,KAAmB,QAAnB,GAA8BA,OAA9B,GAAwCA,OAAO,CAACC,OAA9D;AACA,MAAIC,WAAW,GAAGF,OAAO,CAACE,WAAR,KAAwBC,SAAxB,GAAoCT,mBAApC,GAA0DM,OAAO,CAACE,WAApF;AACA,MAAIE,MAAM,GAAGJ,OAAO,CAACI,MAAR,KAAmBD,SAAnB,GAA+BR,cAA/B,GAAgDK,OAAO,CAACI,MAArE;AACA,MAAIC,OAAO,GAAG,EAAd;AACA,MAAIC,SAAS,GAAGN,OAAO,CAACM,SAAR,KAAsBH,SAAtB,GAAkCP,iBAAlC,GAAsDI,OAAO,CAACM,SAA9E;AACA,MAAIC,OAAO,GAAGP,OAAO,CAACO,OAAR,IAAmBC,QAAjC;AACA,MAAIC,GAAG,GAAGT,OAAO,CAACS,GAAR,IAAeD,QAAzB;;AAEA,WAASE,gBAAT,CAA0BT,OAA1B,EAAmC;AACjC,WAAO,CAACK,SAAD,IACJJ,WAAW,IAAID,OAAO,CAACU,KAAR,CAAcT,WAAd,CADlB;AAED;;AAED,WAASU,UAAT,CAAoBC,QAApB,EAA8B;AAC5B,QAAI,OAAOT,MAAP,KAAkB,UAAtB,EAAkC;AAChC,aAAOA,MAAM,CAACS,QAAD,CAAb;AACD;;AAED,QAAIF,KAAK,GAAGE,QAAQ,CAACF,KAAT,CAAeP,MAAf,CAAZ;AACA,QAAI,CAACO,KAAL,EAAY;AAEZ,WAAOA,KAAK,CAAC,CAAD,CAAL,IAAYA,KAAK,CAAC,CAAD,CAAxB;AACD;;AAED,MAAIG,KAAK,GAAGtB,EAAE,CAACuB,WAAH,CAAed,OAAf,CAAZ;AAEAa,EAAAA,KAAK,CAACE,OAAN,CAAc,UAAUC,IAAV,EAAgB;AAC5B,QAAIC,QAAQ,GAAGjB,OAAO,GAAG,GAAV,GAAgBgB,IAA/B;;AACA,QAAIzB,EAAE,CAAC2B,QAAH,CAAYD,QAAZ,EAAsBE,WAAtB,EAAJ,EAAyC;AAEvC,UAAIV,gBAAgB,CAACO,IAAD,CAApB,EAA4B;AAE5B,UAAII,UAAU,GAAGtB,UAAU,CAAC;AAC1BE,QAAAA,OAAO,EAAEiB,QADiB;AAE1Bd,QAAAA,MAAM,EAAEA,MAFkB;AAG1BF,QAAAA,WAAW,EAAEA,WAHa;AAI1BO,QAAAA,GAAG,EAAEA,GAJqB;AAK1BF,QAAAA,OAAO,EAAEA;AALiB,OAAD,CAA3B;AAQA,UAAIe,MAAM,CAACC,IAAP,CAAYF,UAAZ,EAAwBG,MAAxB,KAAmC,CAAvC,EAA0C;AAE1CnB,MAAAA,OAAO,CAACI,GAAG,CAACQ,IAAD,EAAOC,QAAP,CAAJ,CAAP,GAA+BG,UAA/B;AAED,KAhBD,MAgBO;AACL,UAAII,IAAI,GAAGb,UAAU,CAACK,IAAD,CAArB;AACA,UAAI,CAACQ,IAAL,EAAW;AAEXpB,MAAAA,OAAO,CAACI,GAAG,CAACgB,IAAD,EAAOP,QAAP,CAAJ,CAAP,GAA+BX,OAAO,CAACd,OAAO,CAACyB,QAAD,CAAR,CAAtC;AACD;AACF,GAxBD;AA0BA,SAAOb,OAAP;AACD,CAtDD;;AAwDA,SAASG,QAAT,CAAkBkB,GAAlB,EAAuB;AACrB,SAAOA,GAAP;AACD","sourcesContent":["var fs = require('fs');\n\nvar DEFAULT_EXCLUDE_DIR = /^\\./;\nvar DEFAULT_FILTER = /^([^\\.].*)\\.js(on)?$/;\nvar DEFAULT_RECURSIVE = true;\n\nmodule.exports = function requireAll(options) {\n  var dirname = typeof options === 'string' ? options : options.dirname;\n  var excludeDirs = options.excludeDirs === undefined ? DEFAULT_EXCLUDE_DIR : options.excludeDirs;\n  var filter = options.filter === undefined ? DEFAULT_FILTER : options.filter;\n  var modules = {};\n  var recursive = options.recursive === undefined ? DEFAULT_RECURSIVE : options.recursive;\n  var resolve = options.resolve || identity;\n  var map = options.map || identity;\n\n  function excludeDirectory(dirname) {\n    return !recursive ||\n      (excludeDirs && dirname.match(excludeDirs));\n  }\n\n  function filterFile(filename) {\n    if (typeof filter === 'function') {\n      return filter(filename);\n    }\n\n    var match = filename.match(filter);\n    if (!match) return;\n\n    return match[1] || match[0];\n  }\n\n  var files = fs.readdirSync(dirname);\n\n  files.forEach(function (file) {\n    var filepath = dirname + '/' + file;\n    if (fs.statSync(filepath).isDirectory()) {\n\n      if (excludeDirectory(file)) return;\n\n      var subModules = requireAll({\n        dirname: filepath,\n        filter: filter,\n        excludeDirs: excludeDirs,\n        map: map,\n        resolve: resolve\n      });\n\n      if (Object.keys(subModules).length === 0) return;\n\n      modules[map(file, filepath)] = subModules;\n\n    } else {\n      var name = filterFile(file);\n      if (!name) return;\n\n      modules[map(name, filepath)] = resolve(require(filepath));\n    }\n  });\n\n  return modules;\n};\n\nfunction identity(val) {\n  return val;\n}\n"]},"metadata":{},"sourceType":"script"}